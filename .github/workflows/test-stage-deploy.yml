name: Build, Push and Deploy Node.js app

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: ['release', main, test-stage-deploy]
    pull_request: [main, development]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # REGISTRY: docker.pkg.github.com
  # REPO: kaizen-sankaku/nodejs-deploy/nodejs-image
  # CONTAINER: nodejs-image
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # push_to_registry:
  #   name: Push Docker image to GitHub Packages
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2

  #     - name: Push to GitHub Packages
  #       uses: docker/build-push-action@v3
  #       with:
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #         registry: ${{ env.REGISTRY }}
  #         repository: ${{ env.REPO }}
  #         tag_with_ref: true
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  # deploy:
  #   needs: [push_to_registry]
  #   name: Deploy to DigitalOcean
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup SSH connection
  #       uses: webfactory/ssh-agent@v0.5.1
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_KEY }}

  #     - name: Adding Known Hosts
  #       run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

  #     - name: Login to the GitHub Packages Docker Registry
  #       run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker login ${{env.REGISTRY}} -u ${{github.actor}} -p ${{secrets.GITHUB_TOKEN}}"

  #     - name: Pull latest container
  #       run: |
  #         ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker pull ${{env.REGISTRY}}/${{env.REPO}}:latest"

  #     - name: Stop deployed container
  #       continue-on-error: true
  #       run: |
  #         ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker stop ${{env.CONTAINER}}"

  #     - name: Remove deployed container
  #       continue-on-error: true
  #       run: |
  #         ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker rm ${{env.CONTAINER}}"

  #     - name: Start docker container
  #       run: |
  #         ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker run -p 8080:8080 -d --name=${{env.CONTAINER}} ${{env.REGISTRY}}/${{env.REPO}}:latest"

  #     - name: Logout from the GitHub Packages Docker Registry
  #       run: ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker logout ${{env.REGISTRY}}"
